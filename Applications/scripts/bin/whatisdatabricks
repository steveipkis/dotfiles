#!/usr/local/bin/bash

GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

################################################################
# The command line help #
################################################################

display_help() {

    # echo "Usage: $0 [workspace] [command]" >&2
    echo "Usage: whatisdatabricks [workspace] [command]" >&2
    echo
    echo "   workspace              the databricks workspace to use, either [dev, test, prod]"
    echo "   command                either ['jobs', 'runs'], defaults to 'jobs'"
    echo "   -h, --help             show this help text"
    echo
    # echo some stuff here for the -a or --add-options
    exit 1
}

################################################################
# Check if parameters options are given on the commandline
################################################################

while :
do
    case "$1" in
      -h | --help)
          display_help  # Call your function
          exit 0
          ;;
      *)  # No more options
          break
          ;;
    esac
done

################################################################
# Function Execution
################################################################

ENV=$1
COMMAND=$2

## Create a dictionary for all our workspaces
declare -A WORKSPACE
WORKSPACE=( ["prod"]="dbc-2bcb7c03-2845" ["dev"]="dbc-5e4c4e7b-aa35" ["test"]="dbc-794d7fff-bde9")

## First validate the workspace
DENV=`grep \-E "\[(.*)\]" ~/.databrickscfg`
if echo "${DENV}" | fgrep --word-regexp $ENV; then
    echo "Workspace Found"
else
    echo -e "${RED}ERROR: Workspace not found.${NC} Workspaces found:"
	echo -e "$GREEN"
    echo "${DENV}" && exit 1
	echo -e "$NC"
fi

## Next fetch the tokens and store them into an array
databricks=( $(grep -A 1 -B 0 -E "host = (.*)"${WORKSPACE[$ENV]}"(.*)" ~/.databrickscfg) )
declare -p databricks > /dev/null 2>&1

## Finally make a call and fetch token
echo -e "Using databricks workspace: ${GREEN}${databricks[2]}${NC}"

JOBS_SUBQUERY='. | {job_id, creator_user_name, "name": .settings["name"], created_time}'
RUNS_SUBQUERY='. | {job_id, run_id, creator_user_name, run_name, run_page_url, run_type, attempt_number, start_time, setup_duration, execution_duration, cleanup_duration, end_time}'


if [[ ! -z ${COMMAND} ]] && [[ ${COMMAND} == "runs" ]]; then
    while read command
    do
      eval "jq '$RUNS_SUBQUERY'" <<< $command
    done <<< "$(curl -H "Authorization: Bearer ${databricks[5]}" ${databricks[2]}/api/2.0/jobs/runs/list | jq -c '.runs | .[]' | fzf --exact -m --preview 'jq --color-output . <<<  {}'))"
else
    while read command
    do
      eval "jq '$SUBQUERY'" <<< $command
    done <<< "$(curl -H "Authorization: Bearer ${databricks[5]}" ${databricks[2]}/api/2.0/jobs/list | jq -c '.jobs | .[]' | fzf --exact -m --preview 'jq --color-output . <<<  {}'))"
fi
